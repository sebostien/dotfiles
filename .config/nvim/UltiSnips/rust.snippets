snippet clippy "Clippy lints" b
#![warn(
    missing_copy_implementations,
    clippy::all,
    clippy::doc_markdown,
    clippy::dbg_macro,
    clippy::todo,
    clippy::empty_enum,
    clippy::enum_glob_use,
    clippy::mem_forget,
    clippy::use_self,
    clippy::filter_map_next,
    clippy::needless_continue,
    clippy::needless_borrow,
    clippy::match_wildcard_for_single_variants,
    clippy::if_let_mutex,
    clippy::mismatched_target_os,
    clippy::await_holding_lock,
    clippy::match_on_vec_items,
    clippy::imprecise_flops,
    clippy::lossy_float_literal,
    clippy::rest_pat_in_fully_bound_structs,
    clippy::fn_params_excessive_bools,
    clippy::exit,
    clippy::inefficient_to_string,
    clippy::linkedlist,
    clippy::macro_use_imports,
    clippy::option_option,
    clippy::verbose_file_reads,
    clippy::unnested_or_patterns,
    clippy::absurd_extreme_comparisons,
    rust_2018_idioms,
    future_incompatible,
    nonstandard_style,
    clippy::correctness,
    clippy::suspicious,
    clippy::complexity,
    clippy::perf,
    clippy::style,
    clippy::pedantic
)]
endsnippet

snippet AOCTest "AOC Test" b
pub fn get_solution() -> crate::Solution<i64, i64> {
    crate::Solution {
        date: (2023, $0),
        part_1: Box::new(part_1),
        part_2: Box::new(part_2),
        answer: (0, 0),
    }
}

fn part_1(_input: &str) -> anyhow::Result<i64> {
    Ok(0)
}

fn part_2(_input: &str) -> anyhow::Result<i64> {
    Ok(0)
}

#[test]
fn dayXXX() {
    let input = r#"

    "#
    .trim();

    assert_eq!(0, part_1(input).unwrap());
    assert_eq!(0, part_2(input).unwrap());
}
endsnippet



# vim:ft=snippets
